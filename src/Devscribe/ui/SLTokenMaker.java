/* The following code was generated by JFlex 1.4.3 */
package Devscribe.ui;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;

/**
 * Scanner for the SL programming language.
 * <p>
 *
 * @author FÃ©lix Pedrozo
 * @version 1.0
 */
public class SLTokenMaker extends AbstractJFlexCTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int EOL_COMMENT = 4;
    public static final int YYINITIAL = 0;
    public static final int MLC = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\13\1\6\2\0\1\12\22\0\1\13\1\42\1\11\1\46" +
            "\1\51\1\42\1\43\1\5\2\50\1\15\1\17\1\35\1\17\1\20" +
            "\1\14\1\4\11\3\1\44\1\35\1\36\1\37\1\41\1\47\1\46" +
            "\1\26\3\1\1\24\1\25\2\1\1\31\2\1\1\27\1\1\1\32" +
            "\1\33\2\1\1\22\1\30\1\21\1\23\5\1\1\50\1\7\1\50" +
            "\1\40\1\2\1\0\1\62\1\10\1\66\1\64\1\16\1\56\1\74" +
            "\1\52\1\57\1\1\1\77\1\60\1\72\1\63\1\70\1\54\1\76" +
            "\1\65\1\55\1\53\1\75\1\67\1\61\1\71\1\100\1\73\1\34" +
            "\1\45\1\34\1\47\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\2\3\1\4\1\5\1\2\1\4" +
            "\1\1\1\6\2\7\6\2\1\10\2\7\2\1\21\2" +
            "\1\11\1\12\5\11\1\13\3\11\3\14\1\0\1\14" +
            "\1\15\1\0\1\4\1\2\2\4\1\16\1\17\5\2" +
            "\1\20\12\2\1\21\32\2\1\21\4\2\1\22\10\0" +
            "\1\3\1\23\1\0\1\23\1\0\1\4\1\24\1\4" +
            "\1\24\1\0\1\2\1\25\12\2\2\25\1\2\1\21" +
            "\1\2\1\21\1\2\1\25\3\2\1\21\1\25\15\2" +
            "\1\21\3\2\10\0\1\26\43\2\2\0\1\27\2\0" +
            "\1\30\20\2\1\21\4\2\4\0\10\2\1\31\23\2";

    private static int[] zzUnpackAction() {
        int[] result = new int[279];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7" +
            "\0\u0208\0\u0249\0\u028a\0\u0208\0\u02cb\0\u030c\0\u0208\0\u034d" +
            "\0\u0208\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0208\0\u0492\0\u04d3" +
            "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db" +
            "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3" +
            "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0208\0\u0a28\0\u0a69\0\u0aaa" +
            "\0\u0aeb\0\u0b2c\0\u0208\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71" +
            "\0\u0cb2\0\u0cf3\0\u0186\0\u0208\0\u0d34\0\u0d75\0\u0db6\0\u0df7" +
            "\0\u0e38\0\u0208\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe" +
            "\0\u0104\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185" +
            "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d" +
            "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595" +
            "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d" +
            "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5" +
            "\0\u19e6\0\u1a27\0\u1a68\0\u0208\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c" +
            "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u0c71\0\u1cb1\0\u1cf2\0\u1d33" +
            "\0\u1d74\0\u1db5\0\u0d34\0\u1df6\0\u0208\0\u1e37\0\u1e78\0\u0104" +
            "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080" +
            "\0\u20c1\0\u2102\0\u2143\0\u1ffe\0\u2184\0\u21c5\0\u2206\0\u0104" +
            "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e" +
            "\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616" +
            "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e" +
            "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26" +
            "\0\u0208\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed" +
            "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5" +
            "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd" +
            "\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205" +
            "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d" +
            "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615" +
            "\0\u3656\0\u3697\0\u36d8\0\u3719\0\u23cd\0\u375a\0\u379b\0\u37dc" +
            "\0\u1964\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3" +
            "\0\u33cc\0\u39e4\0\u348f\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29" +
            "\0\u3b6a\0\u3bab\0\u3bec\0\u0104\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0" +
            "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8" +
            "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[279];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\4\2\5\1\6\1\7\1\10\1\11\1\4\1\12" +
            "\1\13\1\14\1\15\1\16\1\17\1\20\1\17\1\21" +
            "\1\22\3\5\1\23\2\5\1\24\1\5\1\25\1\5" +
            "\1\26\1\21\1\27\1\30\1\17\1\30\1\17\1\31" +
            "\1\17\1\32\1\4\1\14\1\26\1\4\1\33\1\34" +
            "\1\35\1\36\1\37\1\40\1\41\1\5\1\42\1\43" +
            "\1\44\1\45\1\46\1\47\1\50\1\5\1\51\1\5" +
            "\1\52\1\53\3\5\6\54\1\55\6\54\1\56\34\54" +
            "\1\57\3\54\1\60\2\54\1\61\17\54\6\62\1\63" +
            "\43\62\1\64\3\62\1\65\2\62\1\66\17\62\5\4" +
            "\2\0\2\4\5\0\1\4\2\0\13\4\12\0\1\4" +
            "\2\0\31\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\27\5\2\67" +
            "\1\70\2\6\2\0\2\67\5\0\1\71\1\0\1\72" +
            "\3\67\1\71\7\67\12\0\1\67\2\0\33\67\2\73" +
            "\2\0\2\67\5\0\1\71\1\0\1\72\3\67\1\71" +
            "\7\67\12\0\1\67\2\0\30\67\5\10\1\74\1\75" +
            "\1\76\71\10\101\0\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\77\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\27\5\6\13\1\100\1\101\1\13\1\74\67\13\13\0" +
            "\1\15\101\0\1\102\1\103\63\0\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\15\5\1\104\1\105\1\106\7\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\1\5" +
            "\1\107\11\5\12\0\1\4\2\0\1\4\27\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\5\5" +
            "\1\110\5\5\12\0\1\4\2\0\1\4\27\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\10\5" +
            "\1\111\2\5\12\0\1\4\2\0\1\4\27\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\12\5" +
            "\1\111\12\0\1\4\2\0\1\4\27\5\37\0\1\17" +
            "\1\0\1\17\76\0\1\17\104\0\1\17\102\0\1\17" +
            "\33\0\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\10\5\1\112" +
            "\16\5\1\4\4\5\2\0\1\4\1\5\5\0\1\113" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\5\5\1\114" +
            "\2\5\1\115\16\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\10\5\1\116\2\5\1\117\1\120\1\5\1\121\10\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\122\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\1\5\1\123\3\5" +
            "\1\124\1\5\1\125\1\126\12\5\1\127\1\130\2\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\5\5\1\131\21\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\4\5\1\132\4\5" +
            "\1\133\6\5\1\134\6\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\135\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\5\5\1\136\10\5\1\137\10\5\1\4\4\5" +
            "\2\0\1\4\1\121\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\3\5\1\140\2\5\1\141\2\5" +
            "\1\142\1\5\1\143\13\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\16\5\1\144\4\5\1\145\3\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\146\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\5\5\1\147\21\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\150\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\10\5\1\151\12\5\1\152\3\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\6\5\1\121\1\5" +
            "\1\153\5\5\1\154\10\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\155\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\10\5\1\156\16\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\13\5\1\157\13\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\5\5\1\160\2\5\1\161\16\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\162\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\27\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\2\5\1\163\24\5\6\54\1\0\6\54\1\0" +
            "\34\54\1\0\3\54\1\0\2\54\1\0\17\54\14\0" +
            "\1\164\137\0\1\165\100\0\1\166\3\0\1\167\102\0" +
            "\1\170\17\0\6\62\1\0\43\62\1\0\3\62\1\0" +
            "\2\62\1\0\17\62\53\0\1\171\100\0\1\172\3\0" +
            "\1\173\102\0\1\174\17\0\5\67\2\0\2\67\5\0" +
            "\1\67\2\0\13\67\12\0\1\67\2\0\32\67\1\70" +
            "\2\175\2\0\2\67\5\0\1\67\2\0\13\67\12\0" +
            "\1\67\2\0\33\67\2\176\2\0\2\67\5\0\1\67" +
            "\1\177\1\0\13\67\12\0\1\67\2\0\30\67\3\0" +
            "\2\200\74\0\5\75\1\74\1\75\1\201\71\75\5\202" +
            "\1\203\1\0\3\10\41\202\1\10\7\202\1\10\1\202" +
            "\1\10\13\202\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\106\2\0\13\5\12\0\1\4\2\0\1\4\27\5" +
            "\7\100\1\204\1\100\1\205\74\100\1\13\1\0\3\13" +
            "\41\100\1\13\7\100\1\13\1\100\1\13\13\100\15\0" +
            "\1\206\63\0\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\10\5" +
            "\1\207\16\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\4\5" +
            "\1\210\22\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\2\5" +
            "\1\210\24\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\2\5\1\211\10\5\12\0\1\4\2\0" +
            "\1\4\27\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\6\5\1\212\4\5\12\0\1\4\2\0" +
            "\1\4\27\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\3\5" +
            "\1\213\23\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\13\5" +
            "\1\214\13\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\2\5" +
            "\1\215\24\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\11\5" +
            "\1\210\15\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\3\5" +
            "\1\216\7\5\1\217\13\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\16\5\1\220\10\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\16\5\1\221\10\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\3\5\1\210\23\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\1\5\1\222\12\5\1\210\12\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\13\5\1\223\13\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\11\5\1\224\15\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\10\5\1\106\16\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\6\5\1\225\20\5\1\4\4\5" +
            "\2\0\1\4\1\226\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\27\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\13\5\1\227\13\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\11\5\1\230\15\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\15\5\1\231\11\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\1\5\1\232\3\5\1\233\6\5\1\210\12\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\2\5\1\234\24\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\235\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\27\5\1\4\4\5" +
            "\2\0\1\4\1\236\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\27\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\7\5\1\135\12\5\1\237\4\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\14\5\1\240\12\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\115\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\27\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\12\5\1\230\14\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\14\5\1\241\12\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\1\5\1\230\25\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\20\5\1\242\6\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\3\5\1\243\10\5\1\210\12\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\20\5\1\210\6\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\1\5\1\244\1\245\1\5\1\230" +
            "\3\5\1\246\11\5\1\247\4\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\11\5\1\250\15\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\11\5\1\251\15\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\3\5\1\216\6\5\1\252\14\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\3\5\1\210\5\5\1\253" +
            "\15\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\14\5\1\254" +
            "\12\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\6\5\1\210" +
            "\4\5\1\255\13\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\12\5\1\210\14\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\256\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\11\5\1\210\15\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\1\5\1\257\15\5\1\210\7\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\1\5\1\260\25\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\2\5\1\135\24\5\53\0\1\261\101\0" +
            "\1\262\104\0\1\263\101\0\1\264\72\0\1\265\101\0" +
            "\1\266\104\0\1\267\101\0\1\270\17\0\3\67\2\176" +
            "\2\0\2\67\5\0\1\67\2\0\13\67\12\0\1\67" +
            "\2\0\30\67\3\0\2\176\74\0\3\67\2\200\2\0" +
            "\2\67\5\0\1\71\2\0\3\67\1\71\7\67\12\0" +
            "\1\67\2\0\30\67\5\0\1\75\1\0\3\75\41\0" +
            "\1\75\7\0\1\75\1\0\1\75\13\0\5\202\1\205" +
            "\1\0\72\202\6\100\1\0\72\100\14\0\1\271\64\0" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\6\5\1\230\20\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\3\5\1\111\7\5\12\0\1\4\2\0\1\4\27\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\7\5\1\211\3\5\12\0\1\4\2\0\1\4\27\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\1\5\1\272\25\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\20\5\1\273\6\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\16\5\1\274\10\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\16\5\1\230\10\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\10\5\1\275\16\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\22\5\1\276\4\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\23\5\1\277\3\5" +
            "\1\4\1\5\1\300\2\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\27\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\6\5\1\141\3\5" +
            "\1\301\14\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\5\5" +
            "\1\302\21\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\3\5" +
            "\1\303\7\5\1\304\13\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\1\5\1\210\25\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\10\5\1\305\16\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\306\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\27\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\14\5" +
            "\1\307\12\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\13\5" +
            "\1\310\13\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\13\5" +
            "\1\210\13\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\311\2\0\13\5\12\0\1\4\2\0\1\4\27\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\5\5\1\312\21\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\5\5\1\313\21\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\1\314\1\315\25\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\316\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\27\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\12\5\1\317\14\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\5\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\16\5\1\320\10\5\1\4\4\5" +
            "\2\0\1\4\1\5\5\0\1\321\2\0\13\5\12\0" +
            "\1\4\2\0\1\4\27\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\12\5\1\322\14\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\5\5\1\323\21\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\12\5\1\324\14\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\14\5\1\325\12\5\1\4\4\5\2\0\1\4" +
            "\1\5\5\0\1\326\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\27\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\3\5" +
            "\1\327\23\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\1\5" +
            "\1\330\25\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\5\5" +
            "\1\331\21\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\11\5" +
            "\1\332\15\5\1\4\4\5\2\0\1\4\1\5\5\0" +
            "\1\5\2\0\13\5\12\0\1\4\2\0\1\4\13\5" +
            "\1\333\13\5\1\4\1\5\1\334\2\5\2\0\1\4" +
            "\1\5\5\0\1\5\2\0\13\5\12\0\1\4\2\0" +
            "\1\4\27\5\54\0\1\335\70\0\1\336\52\0\1\262" +
            "\102\0\1\337\134\0\1\340\70\0\1\341\52\0\1\266" +
            "\102\0\1\342\60\0\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\10\5\1\230\16\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\5\5\1\343\21\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\3\5\1\230\23\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\20\5\1\132\6\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\13\5\1\344\13\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\11\5\1\227\15\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\3\5\1\345\1\5\1\346\6\5\1\347\1\5\1\346" +
            "\10\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\23\5\1\106" +
            "\3\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\13\5\1\230" +
            "\13\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\1\5\1\235" +
            "\25\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\23\5\1\350" +
            "\3\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\6\5\1\210" +
            "\20\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\13\5\1\351" +
            "\13\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\5\5\1\216" +
            "\21\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\5\5\1\352" +
            "\21\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\17\5\1\144" +
            "\7\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\14\5\1\353" +
            "\12\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\5\5\1\210" +
            "\21\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\5\5\1\354" +
            "\21\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\10\5\1\115" +
            "\16\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\13\5\1\355" +
            "\13\5\1\4\4\5\2\0\1\4\1\5\5\0\1\230" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\27\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\13\5\1\356\13\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\1\5\1\225\25\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\25\5\1\357\1\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\3\5\1\360\23\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\16\5\1\147\10\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\20\5\1\361\6\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\11\5\1\362\15\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\1\5\1\363\25\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\16\5\1\302\10\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\10\5\1\364\16\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\1\5\1\365\25\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\5\5\1\366\21\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\3\5\1\367\1\5\1\346" +
            "\6\5\1\347\1\5\1\346\10\5\44\0\1\336\10\0" +
            "\1\262\37\0\1\370\65\0\1\337\1\371\2\337\1\371" +
            "\2\0\1\337\3\0\1\337\1\371\1\337\2\371\13\337" +
            "\1\0\1\371\1\0\1\371\2\0\3\371\1\0\3\371" +
            "\30\337\44\0\1\341\10\0\1\266\37\0\1\372\65\0" +
            "\1\342\1\373\2\342\1\373\2\0\1\342\3\0\1\342" +
            "\1\373\1\342\2\373\13\342\1\0\1\373\1\0\1\373" +
            "\2\0\3\373\1\0\3\373\30\342\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\11\5\1\374\15\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\10\5\1\375\16\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\1\5\1\376\25\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\4\5\1\121\22\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\16\5\1\377\4\5\1\u0100\3\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\1\5\1\u0101\25\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\14\5\1\u0102\12\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\20\5\1\u0103\6\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\16\5\1\u0104\10\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\15\5\1\216\11\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\11\5\1\272\15\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\u0105\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\27\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\1\5\1\u0106\25\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\10\5\1\u0104\16\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\10\5\1\u0107\16\5\1\4\4\5\2\0" +
            "\1\4\1\u0108\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\27\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\13\5\1\u0109\13\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\21\5\1\230\5\5\1\4\4\5\2\0\1\4\1\5" +
            "\5\0\1\5\2\0\13\5\12\0\1\4\2\0\1\4" +
            "\14\5\1\u010a\12\5\14\0\1\337\100\0\1\342\64\0" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\10\5\1\235\16\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\20\5\1\272\6\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\12\5\1\u010b\14\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\6\5\1\u010c\20\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\13\5\1\u010d\13\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\5\5\1\356\21\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\10\5\1\u010e\16\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\5\5\1\235\21\5" +
            "\1\4\4\5\2\0\1\4\1\5\5\0\1\5\2\0" +
            "\13\5\12\0\1\4\2\0\1\4\26\5\1\210\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\13\5\1\216\13\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\11\5\1\u010f\15\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\6\5\1\u0110\20\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\10\5\1\274\16\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\13\5\1\u0111\13\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\5\5\1\115\10\5\1\221" +
            "\10\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\16\5\1\235" +
            "\10\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\2\5\1\u0112" +
            "\24\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\20\5\1\u0113" +
            "\6\5\1\4\4\5\2\0\1\4\1\5\5\0\1\5" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\1\5\1\u0110" +
            "\25\5\1\4\4\5\2\0\1\4\1\5\5\0\1\274" +
            "\2\0\13\5\12\0\1\4\2\0\1\4\27\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\3\5\1\u0114\23\5\1\4" +
            "\4\5\2\0\1\4\1\5\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\16\5\1\121\10\5\1\4" +
            "\4\5\2\0\1\4\1\u0115\5\0\1\5\2\0\13\5" +
            "\12\0\1\4\2\0\1\4\27\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\5\5\1\u0116\21\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\5\5\1\374\21\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\5\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\21\5\1\u0117\5\5\1\4\4\5\2\0" +
            "\1\4\1\5\5\0\1\210\2\0\13\5\12\0\1\4" +
            "\2\0\1\4\27\5";

    private static int[] zzUnpackTrans() {
        int[] result = new int[16640];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\5\1\1\11\2\1\1\11\2\1\1\11\1\1" +
            "\1\11\4\1\1\11\26\1\1\11\5\1\1\11\6\1" +
            "\1\0\1\1\1\11\1\0\4\1\1\11\61\1\1\11" +
            "\10\0\2\1\1\0\1\1\1\0\3\1\1\11\1\0" +
            "\52\1\10\0\1\11\43\1\2\0\1\1\2\0\26\1" +
            "\4\0\34\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[279];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    @Override
    public boolean getShouldIndentNextLineAfter(Token t) {
        if (t != null) {
            switch (t.length()) {
                case 1:
                    char ch = t.charAt(0);
                    return ch == '{' || ch == '(';
                case 3:
                    return t.getLexeme().equals("var");
                case 5:
                    return t.getLexeme().equals("const") || t.getLexeme().equals("tipos");
                case 6:
                    return t.getLexeme().equals("inicio");
                case 7:
                    return t.getLexeme().equals("repetir");
                case 9:
                    return t.getLexeme().equals("variables");
                case 10:
                    return t.getLexeme().equals("constantes");
            }
        }

        return false;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    private int zzPushbackPos;

    /* user code: */

    /**
     * Constructor. This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public SLTokenMaker() {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     * @param hyperlink   Whether this token is a hyperlink.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType,
            int startOffset, boolean hyperlink) {
        super.addToken(array, start, end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { "//", null };
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>. This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state;
        switch (initialTokenType) {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     *         <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array). So, we assign zzEndRead here.
         */
        // zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public SLTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public SLTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 168) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1)
                        break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8)
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 23: {
                    int temp = zzStartRead;
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
                    start = zzMarkedPos;
                }
                case 26:
                    break;
                case 5: {
                    addNullToken();
                    return firstToken;
                }
                case 27:
                    break;
                case 18: {
                    yybegin(YYINITIAL);
                    addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
                }
                case 28:
                    break;
                case 22: {
                    addToken(Token.COMMENT_MULTILINE);
                }
                case 29:
                    break;
                case 15: {
                    start = zzMarkedPos - 2;
                    yybegin(MLC);
                }
                case 30:
                    break;
                case 6: {
                    addToken(Token.WHITESPACE);
                }
                case 31:
                    break;
                case 20: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                }
                case 32:
                    break;
                case 19: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 33:
                    break;
                case 17: {
                    addToken(Token.RESERVED_WORD);
                }
                case 34:
                    break;
                case 8: {
                    addToken(Token.SEPARATOR);
                }
                case 35:
                    break;
                case 2: {
                    addToken(Token.IDENTIFIER);
                }
                case 36:
                    break;
                case 11: {
                    addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                    addNullToken();
                    return firstToken;
                }
                case 37:
                    break;
                case 14: {
                    start = zzMarkedPos - 2;
                    yybegin(EOL_COMMENT);
                }
                case 38:
                    break;
                case 21: {
                    addToken(Token.FUNCTION);
                }
                case 39:
                    break;
                case 4: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                    addNullToken();
                    return firstToken;
                }
                case 40:
                    break;
                case 25: {
                    addToken(Token.DATA_TYPE);
                }
                case 41:
                    break;
                case 1: {
                    addToken(Token.ERROR_IDENTIFIER);
                }
                case 42:
                    break;
                case 16: {
                    addToken(Token.LITERAL_BOOLEAN);
                }
                case 43:
                    break;
                case 13: {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 44:
                    break;
                case 12: {
                    addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 45:
                    break;
                case 24: {
                    int temp = zzStartRead;
                    addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                    addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_EOL);
                    start = zzMarkedPos;
                }
                case 46:
                    break;
                case 3: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 47:
                    break;
                case 7: {
                    addToken(Token.OPERATOR);
                }
                case 48:
                    break;
                case 9: {
                }
                case 49:
                    break;
                case 10: {
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    return firstToken;
                }
                case 50:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case EOL_COMMENT: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                                addNullToken();
                                return firstToken;
                            }
                            case 280:
                                break;
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 281:
                                break;
                            case MLC: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                                return firstToken;
                            }
                            case 282:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
